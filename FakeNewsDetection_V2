{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":310019,"sourceType":"datasetVersion","datasetId":129603}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-21T01:22:35.839356Z","iopub.execute_input":"2024-09-21T01:22:35.839686Z","iopub.status.idle":"2024-09-21T01:22:36.201680Z","shell.execute_reply.started":"2024-09-21T01:22:35.839651Z","shell.execute_reply":"2024-09-21T01:22:36.200798Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/textdb3/fake_or_real_news.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Cell 1: Imports and Configuration\n\nimport re\nimport time\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import mixed_precision\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, SimpleRNN, Conv1D, GlobalMaxPooling1D, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n\n# Enable mixed precision for faster training on the GPU\n#mixed_precision.set_global_policy('mixed_float16')\n\n# Configuration\nDATA_PATH = '/kaggle/input/textdb3/fake_or_real_news.csv'  # Path to dataset\nTEST_SIZE = 0.2  # Test split size\nRANDOM_STATE = 42  # Seed for reproducibility\nBATCH_SIZE = 64  # Reduced batch size for faster processing\nEPOCHS = 10  # Reduced epochs for faster experimentation\nEMBEDDING_DIM = 100  # Dimension of word embeddings\nMAX_SEQUENCE_LENGTH = 300  # Maximum sequence length for tokenized texts (truncated/padded to this length)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T01:35:40.948169Z","iopub.execute_input":"2024-09-21T01:35:40.949044Z","iopub.status.idle":"2024-09-21T01:35:40.957392Z","shell.execute_reply.started":"2024-09-21T01:35:40.949004Z","shell.execute_reply":"2024-09-21T01:35:40.956398Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Cell 2: Load and Preprocess the Data\n\n# Load dataset\ndf = pd.read_csv(DATA_PATH)\n\n# Display the first few rows of the dataset\nprint(f\"Dataset Shape: {df.shape}\")\ndf.head()\n\n# Check for missing values\nprint(f\"\\nMissing values:\\n{df.isnull().sum()}\")\n\n# Preprocess text (lowercasing, removing URLs, punctuation, etc.)\ndef preprocess_text(text):\n    text = text.lower()\n    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)  # Remove URLs\n    text = re.sub(r'<.*?>', '', text)                 # Remove HTML tags\n    text = re.sub(r'[^\\w\\s]', '', text)               # Remove punctuation\n    text = re.sub(r'\\d', '', text)                    # Remove digits\n    text = re.sub(r'\\n', ' ', text)                   # Replace newline with space\n    return text.strip()\n\ndf['text'] = df['text'].apply(preprocess_text)\n\n# Map labels to binary (FAKE -> 0, REAL -> 1)\ndf['label'] = df['label'].map({'FAKE': 0, 'REAL': 1})\n\n# Verify the label distribution\nprint(f\"\\nLabel distribution:\\n{df['label'].value_counts()}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-21T01:23:28.437949Z","iopub.execute_input":"2024-09-21T01:23:28.438567Z","iopub.status.idle":"2024-09-21T01:23:31.896153Z","shell.execute_reply.started":"2024-09-21T01:23:28.438530Z","shell.execute_reply":"2024-09-21T01:23:31.895224Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Dataset Shape: (6335, 4)\n\nMissing values:\nUnnamed: 0    0\ntitle         0\ntext          0\nlabel         0\ndtype: int64\n\nLabel distribution:\nlabel\n1    3171\n0    3164\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T01:23:38.447475Z","iopub.execute_input":"2024-09-21T01:23:38.447886Z","iopub.status.idle":"2024-09-21T01:23:38.463603Z","shell.execute_reply.started":"2024-09-21T01:23:38.447847Z","shell.execute_reply":"2024-09-21T01:23:38.462600Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                              title  \\\n0        8476                       You Can Smell Hillary’s Fear   \n1       10294  Watch The Exact Moment Paul Ryan Committed Pol...   \n2        3608        Kerry to go to Paris in gesture of sympathy   \n3       10142  Bernie supporters on Twitter erupt in anger ag...   \n4         875   The Battle of New York: Why This Primary Matters   \n\n                                                text  label  \n0  daniel greenfield a shillman journalism fellow...      0  \n1  google pinterest digg linkedin reddit stumbleu...      0  \n2  us secretary of state john f kerry said monday...      1  \n3  kaydee king kaydeeking november   the lesson f...      0  \n4  its primary day in new york and frontrunners h...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8476</td>\n      <td>You Can Smell Hillary’s Fear</td>\n      <td>daniel greenfield a shillman journalism fellow...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10294</td>\n      <td>Watch The Exact Moment Paul Ryan Committed Pol...</td>\n      <td>google pinterest digg linkedin reddit stumbleu...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3608</td>\n      <td>Kerry to go to Paris in gesture of sympathy</td>\n      <td>us secretary of state john f kerry said monday...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10142</td>\n      <td>Bernie supporters on Twitter erupt in anger ag...</td>\n      <td>kaydee king kaydeeking november   the lesson f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>875</td>\n      <td>The Battle of New York: Why This Primary Matters</td>\n      <td>its primary day in new york and frontrunners h...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Cell 3: Train-Test Split and Feature Extraction\n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=y)\n\n# TF-IDF Vectorization for traditional models\nprint(\"Vectorizing text data using TF-IDF for traditional models...\")\ntfidf_vectorizer = TfidfVectorizer(max_features=10000)\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\n\nprint(f\"X_train_tfidf shape: {X_train_tfidf.shape}\")\nprint(f\"X_test_tfidf shape: {X_test_tfidf.shape}\")\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Cell 3: Train-Test Split and Tokenization (with OOV token handling)\n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=y)\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Cell 3: Train-Test Split and Tokenization (with OOV token handling)\n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Set a limit to the number of words in the tokenizer\nMAX_VOCAB_SIZE = 20000  # Limit to 20,000 most common words\n\n# Define a tokenizer with OOV token and limited vocab size\ntokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE, oov_token='<OOV>')  # Limit vocab size to 20,000 and use <OOV>\ntokenizer.fit_on_texts(X_train)\n\n# Tokenize sequences\nsequences_train = tokenizer.texts_to_sequences(X_train)\nsequences_test = tokenizer.texts_to_sequences(X_test)\n\n# Vocabulary size (limited)\nvocab_size = min(MAX_VOCAB_SIZE, len(tokenizer.word_index)) + 1  # Include OOV\nprint(f\"Vocabulary Size: {vocab_size}\")\n\n# Check for invalid tokens (greater than vocab_size)\ndef check_invalid_sequences(sequences, vocab_size):\n    for i, sequence in enumerate(sequences):\n        if any(token >= vocab_size for token in sequence):\n            print(f\"Invalid token found in sequence {i}: {sequence}\")\n            return True  # Return True if invalid sequence found\n    return False\n\n# Check for invalid sequences before padding\nif check_invalid_sequences(sequences_train, vocab_size):\n    print(\"Invalid sequences detected.\")\nelse:\n    print(\"No invalid sequences.\")\n\n# Truncate or pad sequences to the same length\nX_train_padded = pad_sequences(sequences_train, maxlen=100, padding='post')\nX_test_padded = pad_sequences(sequences_test, maxlen=100, padding='post')\n\n# Ensure correct label types\ny_train = np.array(y_train, dtype=np.float32)\ny_test = np.array(y_test, dtype=np.float32)\n\n# For traditional models, we'll use TF-IDF vectorization\nvectorizer = TfidfVectorizer(max_features=MAX_VOCAB_SIZE)\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Check the shapes of the padded data\nprint(f\"X_train_padded shape: {X_train_padded.shape}, y_train shape: {y_train.shape}\")\nprint(f\"X_test_padded shape: {X_test_padded.shape}, y_test shape: {y_test.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:10:31.178957Z","iopub.execute_input":"2024-09-21T02:10:31.179880Z","iopub.status.idle":"2024-09-21T02:10:48.979452Z","shell.execute_reply.started":"2024-09-21T02:10:31.179841Z","shell.execute_reply":"2024-09-21T02:10:48.978537Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Vectorizing text data using TF-IDF for traditional models...\nX_train_tfidf shape: (5068, 10000)\nX_test_tfidf shape: (1267, 10000)\nTokenizing and padding text data for TensorFlow models...\nTokenizing and padding text data for TensorFlow models...\nTokenizing and padding text data for TensorFlow models...\nVocabulary Size: 20001\nNo invalid sequences.\nX_train_padded shape: (5068, 100), y_train shape: (5068,)\nX_test_padded shape: (1267, 100), y_test shape: (1267,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Cell 4: Train Traditional Models (Logistic Regression, Random Forest, Decision Tree, Gradient Boosting)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Dictionary to store evaluation results\ntraditional_metrics = {}\n\n# Logistic Regression\nprint(\"Training Logistic Regression...\")\nlr_model = LogisticRegression()\nlr_model.fit(X_train_tfidf, y_train)\nlr_preds = lr_model.predict(X_test_tfidf)\nlr_accuracy = accuracy_score(y_test, lr_preds)\ntraditional_metrics['Logistic Regression'] = lr_accuracy\nprint(f\"Logistic Regression Accuracy: {lr_accuracy:.4f}\")\n\n# Random Forest\nprint(\"Training Random Forest...\")\nrf_model = RandomForestClassifier()\nrf_model.fit(X_train_tfidf, y_train)\nrf_preds = rf_model.predict(X_test_tfidf)\nrf_accuracy = accuracy_score(y_test, rf_preds)\ntraditional_metrics['Random Forest'] = rf_accuracy\nprint(f\"Random Forest Accuracy: {rf_accuracy:.4f}\")\n\n# Decision Tree\nprint(\"Training Decision Tree...\")\ndt_model = DecisionTreeClassifier()\ndt_model.fit(X_train_tfidf, y_train)\ndt_preds = dt_model.predict(X_test_tfidf)\ndt_accuracy = accuracy_score(y_test, dt_preds)\ntraditional_metrics['Decision Tree'] = dt_accuracy\nprint(f\"Decision Tree Accuracy: {dt_accuracy:.4f}\")\n\n# Gradient Boosting\nprint(\"Training Gradient Boosting...\")\ngb_model = GradientBoostingClassifier()\ngb_model.fit(X_train_tfidf, y_train)\ngb_preds = gb_model.predict(X_test_tfidf)\ngb_accuracy = accuracy_score(y_test, gb_preds)\ntraditional_metrics['Gradient Boosting'] = gb_accuracy\nprint(f\"Gradient Boosting Accuracy: {gb_accuracy:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:11:08.822399Z","iopub.execute_input":"2024-09-21T02:11:08.822867Z","iopub.status.idle":"2024-09-21T02:12:19.752793Z","shell.execute_reply.started":"2024-09-21T02:11:08.822824Z","shell.execute_reply":"2024-09-21T02:12:19.751817Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Training Logistic Regression...\nLogistic Regression Accuracy: 0.9219\nTraining Random Forest...\nRandom Forest Accuracy: 0.8982\nTraining Decision Tree...\nDecision Tree Accuracy: 0.8090\nTraining Gradient Boosting...\nGradient Boosting Accuracy: 0.8800\n","output_type":"stream"}]},{"cell_type":"code","source":"# Cell 5: Build and Train Deep Learning Models (LSTM, CNN, RNN)\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Conv1D, GlobalMaxPooling1D, Dropout, SimpleRNN\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Dictionary to store evaluation results for deep learning models\ndeep_learning_metrics = {}\n\n# Function to build LSTM model\ndef build_lstm_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))  # Reduced embedding dimension\n    model.add(LSTM(64, return_sequences=False, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(1, activation='sigmoid'))  # Binary classification output\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# Function to build RNN model\ndef build_rnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))\n    model.add(SimpleRNN(64, dropout=0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# Function to build CNN model\ndef build_cnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))\n    model.add(Conv1D(64, kernel_size=5, activation='relu'))\n    model.add(GlobalMaxPooling1D())\n    model.add(Dropout(0.5))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:12:19.754530Z","iopub.execute_input":"2024-09-21T02:12:19.754842Z","iopub.status.idle":"2024-09-21T02:12:19.766185Z","shell.execute_reply.started":"2024-09-21T02:12:19.754810Z","shell.execute_reply":"2024-09-21T02:12:19.765312Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"# Cell 6: Train and Evaluate Deep Learning Models (LSTM, CNN, RNN)\n\n# Train and evaluate LSTM model\nprint(\"Training LSTM model...\")\nlstm_model = build_lstm_model()\nlstm_model.fit(X_train_padded, y_train, epochs=5, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\nlstm_loss, lstm_accuracy = lstm_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['LSTM'] = lstm_accuracy\nprint(f\"LSTM Model Accuracy: {lstm_accuracy:.4f}\")\n\n# Train and evaluate RNN model\nprint(\"Training RNN model...\")\nrnn_model = build_rnn_model()\nrnn_model.fit(X_train_padded, y_train, epochs=5, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\nrnn_loss, rnn_accuracy = rnn_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['RNN'] = rnn_accuracy\nprint(f\"RNN Model Accuracy: {rnn_accuracy:.4f}\")\n\n# Train and evaluate CNN model\nprint(\"Training CNN model...\")\ncnn_model = build_cnn_model()\ncnn_model.fit(X_train_padded, y_train, epochs=5, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\ncnn_loss, cnn_accuracy = cnn_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['CNN'] = cnn_accuracy\nprint(f\"CNN Model Accuracy: {cnn_accuracy:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:12:35.521954Z","iopub.execute_input":"2024-09-21T02:12:35.522343Z","iopub.status.idle":"2024-09-21T02:13:58.631426Z","shell.execute_reply.started":"2024-09-21T02:12:35.522308Z","shell.execute_reply":"2024-09-21T02:13:58.630409Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Training LSTM model...\nEpoch 1/5\n80/80 - 15s - 184ms/step - accuracy: 0.6835 - loss: 0.6041 - val_accuracy: 0.7790 - val_loss: 0.5093\nEpoch 2/5\n80/80 - 12s - 147ms/step - accuracy: 0.8396 - loss: 0.3766 - val_accuracy: 0.7932 - val_loss: 0.4184\nEpoch 3/5\n80/80 - 12s - 148ms/step - accuracy: 0.8830 - loss: 0.2784 - val_accuracy: 0.7987 - val_loss: 0.4217\nEpoch 4/5\n80/80 - 12s - 153ms/step - accuracy: 0.9090 - loss: 0.2128 - val_accuracy: 0.7758 - val_loss: 0.4528\nEpoch 5/5\n80/80 - 12s - 148ms/step - accuracy: 0.9171 - loss: 0.1760 - val_accuracy: 0.7885 - val_loss: 0.5255\nLSTM Model Accuracy: 0.7885\nTraining RNN model...\nEpoch 1/5\n80/80 - 7s - 93ms/step - accuracy: 0.6127 - loss: 0.6374 - val_accuracy: 0.6796 - val_loss: 0.5875\nEpoch 2/5\n80/80 - 1s - 10ms/step - accuracy: 0.8202 - loss: 0.4247 - val_accuracy: 0.7174 - val_loss: 0.5181\nEpoch 3/5\n80/80 - 1s - 10ms/step - accuracy: 0.9294 - loss: 0.2046 - val_accuracy: 0.7806 - val_loss: 0.4789\nEpoch 4/5\n80/80 - 1s - 10ms/step - accuracy: 0.9613 - loss: 0.1126 - val_accuracy: 0.7672 - val_loss: 0.5402\nEpoch 5/5\n80/80 - 1s - 10ms/step - accuracy: 0.9795 - loss: 0.0659 - val_accuracy: 0.7459 - val_loss: 0.5859\nRNN Model Accuracy: 0.7459\nTraining CNN model...\nEpoch 1/5\n80/80 - 6s - 79ms/step - accuracy: 0.6026 - loss: 0.6738 - val_accuracy: 0.7537 - val_loss: 0.6300\nEpoch 2/5\n80/80 - 0s - 3ms/step - accuracy: 0.7490 - loss: 0.5570 - val_accuracy: 0.7877 - val_loss: 0.4913\nEpoch 3/5\n80/80 - 0s - 3ms/step - accuracy: 0.8339 - loss: 0.4015 - val_accuracy: 0.8185 - val_loss: 0.3995\nEpoch 4/5\n80/80 - 0s - 3ms/step - accuracy: 0.8917 - loss: 0.2923 - val_accuracy: 0.8493 - val_loss: 0.3567\nEpoch 5/5\n80/80 - 0s - 3ms/step - accuracy: 0.9315 - loss: 0.2058 - val_accuracy: 0.8406 - val_loss: 0.3598\nCNN Model Accuracy: 0.8406\n","output_type":"stream"}]},{"cell_type":"code","source":"# Cell 7: Calculate Metrics for All Models\n\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\n# Function to compute metrics\ndef compute_metrics(y_true, y_pred):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred, pos_label=1, average='binary')\n    recall = recall_score(y_true, y_pred, pos_label=1, average='binary')\n    f1 = f1_score(y_true, y_pred, pos_label=1, average='binary')\n    return accuracy, precision, recall, f1\n\n# Dictionary to store evaluation results for traditional models\ntraditional_metrics_full = {}\n\n# Logistic Regression\nlr_preds = lr_model.predict(X_test_tfidf)\ntraditional_metrics_full['Logistic Regression'] = compute_metrics(y_test, lr_preds)\n\n# Random Forest\nrf_preds = rf_model.predict(X_test_tfidf)\ntraditional_metrics_full['Random Forest'] = compute_metrics(y_test, rf_preds)\n\n# Decision Tree\ndt_preds = dt_model.predict(X_test_tfidf)\ntraditional_metrics_full['Decision Tree'] = compute_metrics(y_test, dt_preds)\n\n# Gradient Boosting\ngb_preds = gb_model.predict(X_test_tfidf)\ntraditional_metrics_full['Gradient Boosting'] = compute_metrics(y_test, gb_preds)\n\n# Dictionary to store evaluation results for deep learning models\ndeep_learning_metrics_full = {}\n\n# LSTM Model\nlstm_preds = (lstm_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['LSTM'] = compute_metrics(y_test, lstm_preds)\n\n# RNN Model\nrnn_preds = (rnn_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['RNN'] = compute_metrics(y_test, rnn_preds)\n\n# CNN Model\ncnn_preds = (cnn_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['CNN'] = compute_metrics(y_test, cnn_preds)\n\n# Merge all metrics for comparison\nall_metrics_full = {**traditional_metrics_full, **deep_learning_metrics_full}\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:14:18.786171Z","iopub.execute_input":"2024-09-21T02:14:18.787067Z","iopub.status.idle":"2024-09-21T02:14:22.375968Z","shell.execute_reply.started":"2024-09-21T02:14:18.787029Z","shell.execute_reply":"2024-09-21T02:14:22.375192Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 47ms/step\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"# Cell 8: Plot Comparisons for Accuracy, Precision, Recall, and F1-Score\n\nimport matplotlib.pyplot as plt\n\n# Extract individual metrics\nmodel_names = list(all_metrics_full.keys())\naccuracy_scores = [metrics[0] for metrics in all_metrics_full.values()]\nprecision_scores = [metrics[1] for metrics in all_metrics_full.values()]\nrecall_scores = [metrics[2] for metrics in all_metrics_full.values()]\nf1_scores = [metrics[3] for metrics in all_metrics_full.values()]\n\n# Set up figure\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\n\n# Accuracy Plot\naxs[0, 0].bar(model_names, accuracy_scores, color='skyblue')\naxs[0, 0].set_title('Model Accuracy Comparison')\naxs[0, 0].set_ylabel('Accuracy')\naxs[0, 0].set_ylim(0, 1)\naxs[0, 0].tick_params(axis='x', rotation=45)\n\n# Precision Plot\naxs[0, 1].bar(model_names, precision_scores, color='lightgreen')\naxs[0, 1].set_title('Model Precision Comparison')\naxs[0, 1].set_ylabel('Precision')\naxs[0, 1].set_ylim(0, 1)\naxs[0, 1].tick_params(axis='x', rotation=45)\n\n# Recall Plot\naxs[1, 0].bar(model_names, recall_scores, color='lightcoral')\naxs[1, 0].set_title('Model Recall Comparison')\naxs[1, 0].set_ylabel('Recall')\naxs[1, 0].set_ylim(0, 1)\naxs[1, 0].tick_params(axis='x', rotation=45)\n\n# F1-Score Plot\naxs[1, 1].bar(model_names, f1_scores, color='lightpink')\naxs[1, 1].set_title('Model F1-Score Comparison')\naxs[1, 1].set_ylabel('F1-Score')\naxs[1, 1].set_ylim(0, 1)\naxs[1, 1].tick_params(axis='x', rotation=45)\n\n# Layout adjustment\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:14:35.522612Z","iopub.execute_input":"2024-09-21T02:14:35.523052Z","iopub.status.idle":"2024-09-21T02:14:36.338535Z","shell.execute_reply.started":"2024-09-21T02:14:35.523016Z","shell.execute_reply":"2024-09-21T02:14:36.337627Z"},"trusted":true},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x1000 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Cell 9: Create a Comparison Table\n\nimport pandas as pd\n\n# Prepare data for the table\nmodel_names = list(all_metrics_full.keys())\naccuracy_scores = [metrics[0] for metrics in all_metrics_full.values()]\nprecision_scores = [metrics[1] for metrics in all_metrics_full.values()]\nrecall_scores = [metrics[2] for metrics in all_metrics_full.values()]\nf1_scores = [metrics[3] for metrics in all_metrics_full.values()]\n\n# Create a pandas DataFrame for the comparison table\ncomparison_df = pd.DataFrame({\n    'Model': model_names,\n    'Accuracy': accuracy_scores,\n    'Precision': precision_scores,\n    'Recall': recall_scores,\n    'F1-Score': f1_scores\n})\n\n# Display the table\nprint(comparison_df.to_string(index=False))\n\n# Show the table in the notebook (if you're using a Jupyter notebook)\ndisplay(comparison_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:18:44.178886Z","iopub.execute_input":"2024-09-21T02:18:44.179806Z","iopub.status.idle":"2024-09-21T02:18:44.200500Z","shell.execute_reply.started":"2024-09-21T02:18:44.179766Z","shell.execute_reply":"2024-09-21T02:18:44.199452Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"              Model  Accuracy  Precision   Recall  F1-Score\nLogistic Regression  0.921863   0.934959 0.906940  0.920737\n      Random Forest  0.898185   0.901431 0.894322  0.897862\n      Decision Tree  0.808998   0.806250 0.813880  0.810047\n  Gradient Boosting  0.880032   0.899007 0.856467  0.877221\n               LSTM  0.788477   0.856031 0.694006  0.766551\n                RNN  0.745856   0.729412 0.782334  0.754947\n                CNN  0.840568   0.850649 0.826498  0.838400\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 Model  Accuracy  Precision    Recall  F1-Score\n0  Logistic Regression  0.921863   0.934959  0.906940  0.920737\n1        Random Forest  0.898185   0.901431  0.894322  0.897862\n2        Decision Tree  0.808998   0.806250  0.813880  0.810047\n3    Gradient Boosting  0.880032   0.899007  0.856467  0.877221\n4                 LSTM  0.788477   0.856031  0.694006  0.766551\n5                  RNN  0.745856   0.729412  0.782334  0.754947\n6                  CNN  0.840568   0.850649  0.826498  0.838400","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Accuracy</th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1-Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Logistic Regression</td>\n      <td>0.921863</td>\n      <td>0.934959</td>\n      <td>0.906940</td>\n      <td>0.920737</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Random Forest</td>\n      <td>0.898185</td>\n      <td>0.901431</td>\n      <td>0.894322</td>\n      <td>0.897862</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Decision Tree</td>\n      <td>0.808998</td>\n      <td>0.806250</td>\n      <td>0.813880</td>\n      <td>0.810047</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Gradient Boosting</td>\n      <td>0.880032</td>\n      <td>0.899007</td>\n      <td>0.856467</td>\n      <td>0.877221</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LSTM</td>\n      <td>0.788477</td>\n      <td>0.856031</td>\n      <td>0.694006</td>\n      <td>0.766551</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RNN</td>\n      <td>0.745856</td>\n      <td>0.729412</td>\n      <td>0.782334</td>\n      <td>0.754947</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CNN</td>\n      <td>0.840568</td>\n      <td>0.850649</td>\n      <td>0.826498</td>\n      <td>0.838400</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Cell 10: Create Confusion Matrices for All Models\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Generate confusion matrices for all models\nconf_matrices = {}\n\n# Traditional Models\nconf_matrices['Logistic Regression'] = confusion_matrix(y_test, lr_preds)\nconf_matrices['Random Forest'] = confusion_matrix(y_test, rf_preds)\nconf_matrices['Decision Tree'] = confusion_matrix(y_test, dt_preds)\nconf_matrices['Gradient Boosting'] = confusion_matrix(y_test, gb_preds)\n\n# Deep Learning Models\nconf_matrices['LSTM'] = confusion_matrix(y_test, lstm_preds)\nconf_matrices['RNN'] = confusion_matrix(y_test, rnn_preds)\nconf_matrices['CNN'] = confusion_matrix(y_test, cnn_preds)\n\n# Create a figure for the grid plot\nfig, axes = plt.subplots(3, 3, figsize=(15, 15))\n\n# Flatten axes for easy iteration\naxes = axes.flatten()\n\n# Plot confusion matrices in a grid\nfor i, (model_name, conf_matrix) in enumerate(conf_matrices.items()):\n    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', ax=axes[i], cbar=False)\n    axes[i].set_title(f'{model_name} Confusion Matrix')\n    axes[i].set_xlabel('Predicted')\n    axes[i].set_ylabel('Actual')\n\n# Remove any empty subplots (if there are fewer than 9 models)\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\n# Add a grid-like structure\nfor ax in axes:\n    ax.axhline(y=0, color='black',linewidth=2)\n    ax.axhline(y=2, color='black',linewidth=2)\n    ax.axvline(x=0, color='black',linewidth=2)\n    ax.axvline(x=2, color='black',linewidth=2)\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:23:12.776263Z","iopub.execute_input":"2024-09-21T02:23:12.777517Z","iopub.status.idle":"2024-09-21T02:23:15.807710Z","shell.execute_reply.started":"2024-09-21T02:23:12.777473Z","shell.execute_reply":"2024-09-21T02:23:15.806792Z"},"trusted":true},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x1500 with 7 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Cell 11: Predict on Unseen Data (User Input)\n\ndef preprocess_input_text(text, is_deep_learning=False):\n    \"\"\"\n    Preprocess user input text for prediction.\n    If is_deep_learning is True, apply tokenization and padding.\n    Otherwise, use TF-IDF vectorization for traditional models.\n    \"\"\"\n    # Preprocessing (similar to earlier)\n    text = text.lower()\n    \n    # Remove unwanted characters\n    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)  # URLs\n    text = re.sub(r'<.*?>', '', text)  # HTML tags\n    text = re.sub(r'[^\\w\\s]', '', text)  # Punctuation\n    text = re.sub(r'\\d', '', text)  # Digits\n\n    # Handle deep learning models with tokenization and padding\n    if is_deep_learning:\n        seq = tokenizer.texts_to_sequences([text])\n        padded_seq = pad_sequences(seq, maxlen=100, padding='post')  # Use the maxlen from training\n        return padded_seq\n    \n    # Handle traditional models with TF-IDF\n    else:\n        vectorized_text = vectorizer.transform([text])  # Use the trained TF-IDF vectorizer\n        return vectorized_text\n\ndef predict_news_category(text, model_type=\"cnn\"):\n    \"\"\"\n    Predict whether the news is 'Fake' or 'Real' using the specified model.\n    Model types: 'logistic', 'random_forest', 'decision_tree', 'gradient_boosting', 'lstm', 'rnn', 'cnn'\n    \"\"\"\n    # Preprocess the input text based on the model type\n    if model_type in ['lstm', 'rnn', 'cnn']:\n        processed_text = preprocess_input_text(text, is_deep_learning=True)\n    else:\n        processed_text = preprocess_input_text(text, is_deep_learning=False)\n\n    # Dictionary for prediction based on model type\n    if model_type == \"logistic\":\n        prediction = lr_model.predict(processed_text)\n    elif model_type == \"random_forest\":\n        prediction = rf_model.predict(processed_text)\n    elif model_type == \"decision_tree\":\n        prediction = dt_model.predict(processed_text)\n    elif model_type == \"gradient_boosting\":\n        prediction = gb_model.predict(processed_text)\n    elif model_type == \"lstm\":\n        prediction = (lstm_model.predict(processed_text) > 0.5).astype(\"int32\")\n    elif model_type == \"rnn\":\n        prediction = (rnn_model.predict(processed_text) > 0.5).astype(\"int32\")\n    elif model_type == \"cnn\":\n        prediction = (cnn_model.predict(processed_text) > 0.5).astype(\"int32\")\n    else:\n        return \"Invalid model type selected.\"\n    \n    # Convert numeric prediction to class label\n    class_label = 'Real' if prediction == 1 else 'Fake'\n    return f\"The news is classified as: {class_label}\"\n\n# Example usage:\n# Input from user (test on unseen data)\nuser_input = input(\"Enter a news text for classification: \")\n\n# Select the model type (you can change the model type as needed)\nselected_model_type = \"logistic\"  # Options: 'logistic', 'random_forest', 'decision_tree', 'gradient_boosting', 'lstm', 'rnn', 'cnn'\n\n# Predict the news category\nresult = predict_news_category(user_input, model_type=selected_model_type)\nprint(result)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T02:35:27.440810Z","iopub.execute_input":"2024-09-21T02:35:27.441592Z","iopub.status.idle":"2024-09-21T02:35:30.516979Z","shell.execute_reply.started":"2024-09-21T02:35:27.441556Z","shell.execute_reply":"2024-09-21T02:35:30.516043Z"},"trusted":true},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter a news text for classification:  Mitch McConnell has an unusual admonition for the new Republican majority as it takes over the Senate this week: Donâ€™t be â€œscary.â€  The incoming Senate majority leader has set a political goal for the next two years of overseeing a functioning, reasonable majority on Capitol Hill that scores some measured conservative wins, particularly against environmental regulations, but probably not big victories such as a full repeal of the health-care law. McConnellâ€™s priority is to set the stage for a potential GOP presidential victory in 2016.  â€œI donâ€™t want the American people to think that if they add a Republican president to a Republican Congress, thatâ€™s going to be a scary outcome. I want the American people to be comfortable with the fact that the Republican House and Senate is a responsible, right-of-center, governing majority,â€ the Kentucky Republican said in a broad interview just before Christmas in his Capitol office.  Itâ€™s a far cry from his defiant declaration in 2010 that his â€œsingle most importantâ€ goal was to make President Obama a one-term president, an antagonizing oath that Democrats frequently invoke to embarrass the GOP leader â€” Obama won reelection comfortably in 2012, and McConnellâ€™s party lost seats.  Now in charge at both ends of the Capitol, Republicans aim to avoid the worst excesses of the past four years and make sure the public isnâ€™t fearful of the GOPâ€™s course.  â€œThere would be nothing frightening about adding a Republican president to that governing majority,â€ McConnell said, explaining how he wants voters to view the party on the eve of the 2016 election. â€œI think thatâ€™s the single best thing we can do, is to not mess up the playing field, if you will, for whoever the nominee ultimately is.â€  But McConnell, who will become majority leader Tuesday, is not planning to avoid conflict altogether. He wants to use the annual spending bills to compel Obama to accept conservative policy riders that will divide Democrats, similar to the December spending billâ€™s inclusion of a provision benefiting Wall Street firms involved in risky derivative trades. That rider brought a liberal outcry but did not end up torpedoing the bill, which had Obamaâ€™s support.  McConnell has been coaching his members to understand that, in the initial rounds, they will have to almost unanimously support the budget outline and the spending bills, because few Democrats will support their policy riders.  With 54 Republicans in his caucus, McConnell knows that heâ€™s a long way from getting 67 votes to override an Obama veto and that it wonâ€™t even be easy getting six Democrats to regularly support legislation so that he can overcome likely filibusters led by the incoming minority leader, Sen. Harry M. Reid (D-Nev.). Still, on some issues, such as energy and taxes on the health industry, McConnell thinks thereâ€™s enough bipartisan support to get bills onto Obamaâ€™s desk.  â€œTheyâ€™d like to be relevant. Theyâ€™d like to be part of the process,â€ he said of discussions with some rank-and-file Democrats. â€œAssuming we will have on most issues a largely unified conference â€” I donâ€™t expect that on everything â€” it wouldnâ€™t take a whole lot of Democrats to actually pass legislation in the Senate.â€  But McConnell said those who are â€œcraving some grand deal as a way to measure the next two yearsâ€ should lower their expectations. Heâ€™s very skeptical of such bargains with Democrats on tough issues such as immigration and entitlement reform. Instead, he believes three issues have potential common ground: international trade deals, an overhaul of the tax code and new revenue streams for infrastructure projects.  â€œCould the country use a lot more? You bet. But thereâ€™s no way you can overcome a reluctant president on something really large,â€ McConnell said. The best he can do on some of those bigger issues is force Obama to break out his veto pen so there is a clear set of Democratic policy stances Republicans can campaign against in 2016.  Democrats are dubious of McConnellâ€™s pledge to avert edge-of-the-cliff moments. They believe he will run into the same problems that have bedeviled House Speaker John A. Boehner (R-Ohio) during the past four years â€” including the inability to corral rabble-rousers such as Sen. Ted Cruz (R-Tex.) to support an agenda that conservative critics will probably view as not bold enough in challenging Obama. Appeasing those far-right conservatives will lead to an agenda that Democrats hope to exploit in 2016.  â€œWhat Senator McConnell wants people to think and what they will think when they see the results for themselves are two very different things,â€ said Reidâ€™s spokesman, Adam Jentleson. â€œSenator McConnell heads a caucus that is obsessed with rigging the game against working people in favor of wealthy special interests. Thatâ€™s a scary fact indeed, and he wonâ€™t be able to hide it.â€  While McConnellâ€™s office is adorned with a portrait of Kentuckyâ€™s only other Senate majority leader â€” Alben W. Barkley, whose tenure was often marked by clashes with his own partyâ€™s president, Franklin D. Roosevelt â€” his model more resembles that of George Mitchell, the Democratic majority leader from 1989 through 1994.  Without ever shutting down the government, Mitchell stared down a president of the opposite party, George H.W. Bush, and won several liberal victories in a 1990 budget showdown. Mitchell also delivered a slew of legislation to Bushâ€™s desk that drew a veto, helping frame the debate for the 1992 election on domestic policy.  McConnell has recently studied other two-term presidents on how often they vetoed legislation in their last two years in office. Obama has issued only two minor vetoes over technical matters, largely because the previously Democratic-run Senate prevented anything from reaching his desk that he opposed.  McConnell suggested that a veto strategy would help clarify issues for voters. â€œI think his bureaucracy across the board has done a lot of damage to the country. .â€‰.â€‰. Iâ€™d at least like for him to have to personally take responsibility for it, even if he in the end decides to veto the bill over some restriction on EPA regulations.â€  McConnell is keenly aware of the challenges of reining in some of the impulses that his fellow Republican lawmakers have developed over eight straight years in the minority.  The first test will come on an energy debate, which could begin by the end of this week. McConnell is trying to keep his side from offering amendments not related to energy issues. In recent years, when some rank-and-file Republicans wanted to stop the Senate in its tracks, they would threaten amendments related to how Congress gets its health care.  â€œIâ€™ve asked my members to restrain themselves,â€ he said.  Restraint has been hard to come by in this political era, particularly because a small army of conservative groups has made it a mission to push Republicans to the most strident stands, even if it means shutting down the government or risking default on the national debt.  McConnell faced some of those groups firsthand when they supported his 2014 primary challenger, and he faced a grinding general election against a Democrat who was well financed.  It cost nearly $30Â million from his campaign war chest and tens of millions of dollars more from outside groups. Winning both races handily, McConnell is delivering a message to Republicans on how to behave heading into 2016.  â€œDonâ€™t try to reinvent yourself. Be yourself, number one. And donâ€™t be afraid of a primary. We will win all the primaries. We did it in â€™14. We will do it in â€™16,â€ McConnell said.  Shortly after Election Day this fall, McConnell sat down with Obama for a rare one-on-one meeting in the Oval Office, a huddle that both sides kept largely secret. In the pre-Christmas interview, McConnell acknowledged that the meetingâ€™s purpose was only to discuss areas where the president and Republicans might find bipartisan agreement â€” because their disagreements on other issues were too inÂ­tracÂ­table.  That meeting, he said, focused on trade deals, a tax code overhaul and infrastructure funding. â€œCan we get there on tax reform, trade, infrastructure?â€ he said.  He eschewed the idea of holding the debt ceiling hostage to gain spending-cut concessions from Obama, a tool Republicans had to use before because they were in the minority.  â€œWe are in the majority. We can pass a budget. We can determine how much weâ€™re going to spend,â€ he said.  Avoiding those moments could make for a less â€œscaryâ€ Congress, giving the Republicans a better chance in 2016 to hit the trifecta and gain the White House. His own horse is already chosen, Sen. Rand Paul (R-Ky.), but donâ€™t expect McConnell to be out on the campaign trail or doing any other favors for his home-state colleague.  â€œIâ€™m going to be supporting Rand Paul. But he knows that beyond that, I wonâ€™t be involved in presidential politics. Iâ€™ve got a big job here,â€ he said.\n"},{"name":"stdout","text":"The news is classified as: Real\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}