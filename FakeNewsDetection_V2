{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":310019,"sourceType":"datasetVersion","datasetId":129603}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-21T18:17:28.766609Z","iopub.execute_input":"2024-09-21T18:17:28.766915Z","iopub.status.idle":"2024-09-21T18:17:29.136370Z","shell.execute_reply.started":"2024-09-21T18:17:28.766882Z","shell.execute_reply":"2024-09-21T18:17:29.135444Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/textdb3/fake_or_real_news.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Imports and Configuration","metadata":{}},{"cell_type":"code","source":"# Cell 1: \n\nimport re\nimport time\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras import mixed_precision\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, SimpleRNN, Conv1D, GlobalMaxPooling1D, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n\n# Enable mixed precision for faster training on the GPU\n#mixed_precision.set_global_policy('mixed_float16')\n\n# Configuration\nDATA_PATH = '/kaggle/input/textdb3/fake_or_real_news.csv'  # Path to dataset\nTEST_SIZE = 0.2  # Test split size\nRANDOM_STATE = 42  # Seed for reproducibility\nBATCH_SIZE = 64  # Reduced batch size for faster processing\nEPOCHS = 10  # Reduced epochs for faster experimentation\nEMBEDDING_DIM = 100  # Dimension of word embeddings\nMAX_SEQUENCE_LENGTH = 300  # Maximum sequence length for tokenized texts (truncated/padded to this length)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:17:29.138150Z","iopub.execute_input":"2024-09-21T18:17:29.139027Z","iopub.status.idle":"2024-09-21T18:17:42.449580Z","shell.execute_reply.started":"2024-09-21T18:17:29.138980Z","shell.execute_reply":"2024-09-21T18:17:42.448553Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# Load and Preprocess the Data","metadata":{}},{"cell_type":"code","source":"# Cell 2: \n\n# Load dataset\ndf = pd.read_csv(DATA_PATH)\n\n# Display the first few rows of the dataset\nprint(f\"Dataset Shape: {df.shape}\")\ndf.head()\n\n# Check for missing values\nprint(f\"\\nMissing values:\\n{df.isnull().sum()}\")\n\n# Preprocess text (lowercasing, removing URLs, punctuation, etc.)\ndef preprocess_text(text):\n    text = text.lower()\n    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)  # Remove URLs\n    text = re.sub(r'<.*?>', '', text)                 # Remove HTML tags\n    text = re.sub(r'[^\\w\\s]', '', text)               # Remove punctuation\n    text = re.sub(r'\\d', '', text)                    # Remove digits\n    text = re.sub(r'\\n', ' ', text)                   # Replace newline with space\n    return text.strip()\n\ndf['text'] = df['text'].apply(preprocess_text)\n\n# Map labels to binary (FAKE -> 0, REAL -> 1)\ndf['label'] = df['label'].map({'FAKE': 0, 'REAL': 1})\n\n# Verify the label distribution\nprint(f\"\\nLabel distribution:\\n{df['label'].value_counts()}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:17:42.450935Z","iopub.execute_input":"2024-09-21T18:17:42.451987Z","iopub.status.idle":"2024-09-21T18:17:45.915725Z","shell.execute_reply.started":"2024-09-21T18:17:42.451951Z","shell.execute_reply":"2024-09-21T18:17:45.914766Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Dataset Shape: (6335, 4)\n\nMissing values:\nUnnamed: 0    0\ntitle         0\ntext          0\nlabel         0\ndtype: int64\n\nLabel distribution:\nlabel\n1    3171\n0    3164\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:17:45.918615Z","iopub.execute_input":"2024-09-21T18:17:45.919307Z","iopub.status.idle":"2024-09-21T18:17:45.936277Z","shell.execute_reply.started":"2024-09-21T18:17:45.919257Z","shell.execute_reply":"2024-09-21T18:17:45.935048Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                              title  \\\n0        8476                       You Can Smell Hillary’s Fear   \n1       10294  Watch The Exact Moment Paul Ryan Committed Pol...   \n2        3608        Kerry to go to Paris in gesture of sympathy   \n3       10142  Bernie supporters on Twitter erupt in anger ag...   \n4         875   The Battle of New York: Why This Primary Matters   \n\n                                                text  label  \n0  daniel greenfield a shillman journalism fellow...      0  \n1  google pinterest digg linkedin reddit stumbleu...      0  \n2  us secretary of state john f kerry said monday...      1  \n3  kaydee king kaydeeking november   the lesson f...      0  \n4  its primary day in new york and frontrunners h...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8476</td>\n      <td>You Can Smell Hillary’s Fear</td>\n      <td>daniel greenfield a shillman journalism fellow...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10294</td>\n      <td>Watch The Exact Moment Paul Ryan Committed Pol...</td>\n      <td>google pinterest digg linkedin reddit stumbleu...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3608</td>\n      <td>Kerry to go to Paris in gesture of sympathy</td>\n      <td>us secretary of state john f kerry said monday...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>10142</td>\n      <td>Bernie supporters on Twitter erupt in anger ag...</td>\n      <td>kaydee king kaydeeking november   the lesson f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>875</td>\n      <td>The Battle of New York: Why This Primary Matters</td>\n      <td>its primary day in new york and frontrunners h...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Train-Test Split and Feature Extraction","metadata":{}},{"cell_type":"code","source":"# Cell 3: \n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=y)\n\n# TF-IDF Vectorization for traditional models\nprint(\"Vectorizing text data using TF-IDF for traditional models...\")\ntfidf_vectorizer = TfidfVectorizer(max_features=10000)\nX_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\nX_test_tfidf = tfidf_vectorizer.transform(X_test)\n\nprint(f\"X_train_tfidf shape: {X_train_tfidf.shape}\")\nprint(f\"X_test_tfidf shape: {X_test_tfidf.shape}\")\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Cell 3: Train-Test Split and Tokenization (with OOV token handling)\n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=y)\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Cell 3: Train-Test Split and Tokenization (with OOV token handling)\n\n# Split data into features and target\nX = df['text']\ny = df['label']\n\n# Train-test split with stratification\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n# Tokenization and padding for TensorFlow models\nprint(\"Tokenizing and padding text data for TensorFlow models...\")\n\n# Set a limit to the number of words in the tokenizer\nMAX_VOCAB_SIZE = 20000  # Limit to 20,000 most common words\n\n# Define a tokenizer with OOV token and limited vocab size\ntokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE, oov_token='<OOV>')  # Limit vocab size to 20,000 and use <OOV>\ntokenizer.fit_on_texts(X_train)\n\n# Tokenize sequences\nsequences_train = tokenizer.texts_to_sequences(X_train)\nsequences_test = tokenizer.texts_to_sequences(X_test)\n\n# Vocabulary size (limited)\nvocab_size = min(MAX_VOCAB_SIZE, len(tokenizer.word_index)) + 1  # Include OOV\nprint(f\"Vocabulary Size: {vocab_size}\")\n\n# Check for invalid tokens (greater than vocab_size)\ndef check_invalid_sequences(sequences, vocab_size):\n    for i, sequence in enumerate(sequences):\n        if any(token >= vocab_size for token in sequence):\n            print(f\"Invalid token found in sequence {i}: {sequence}\")\n            return True  # Return True if invalid sequence found\n    return False\n\n# Check for invalid sequences before padding\nif check_invalid_sequences(sequences_train, vocab_size):\n    print(\"Invalid sequences detected.\")\nelse:\n    print(\"No invalid sequences.\")\n\n# Truncate or pad sequences to the same length\nX_train_padded = pad_sequences(sequences_train, maxlen=100, padding='post')\nX_test_padded = pad_sequences(sequences_test, maxlen=100, padding='post')\n\n# Ensure correct label types\ny_train = np.array(y_train, dtype=np.float32)\ny_test = np.array(y_test, dtype=np.float32)\n\n# For traditional models, we'll use TF-IDF vectorization\nvectorizer = TfidfVectorizer(max_features=MAX_VOCAB_SIZE)\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n\n# Check the shapes of the padded data\nprint(f\"X_train_padded shape: {X_train_padded.shape}, y_train shape: {y_train.shape}\")\nprint(f\"X_test_padded shape: {X_test_padded.shape}, y_test shape: {y_test.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:17:45.937808Z","iopub.execute_input":"2024-09-21T18:17:45.938201Z","iopub.status.idle":"2024-09-21T18:18:03.740750Z","shell.execute_reply.started":"2024-09-21T18:17:45.938160Z","shell.execute_reply":"2024-09-21T18:18:03.739753Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Vectorizing text data using TF-IDF for traditional models...\nX_train_tfidf shape: (5068, 10000)\nX_test_tfidf shape: (1267, 10000)\nTokenizing and padding text data for TensorFlow models...\nTokenizing and padding text data for TensorFlow models...\nTokenizing and padding text data for TensorFlow models...\nVocabulary Size: 20001\nNo invalid sequences.\nX_train_padded shape: (5068, 100), y_train shape: (5068,)\nX_test_padded shape: (1267, 100), y_test shape: (1267,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Train Traditional Models (Logistic Regression, Random Forest, Decision Tree, Gradient Boosting)","metadata":{}},{"cell_type":"code","source":"# Cell 4: \n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Dictionary to store evaluation results\ntraditional_metrics = {}\n\n# Logistic Regression\nprint(\"Training Logistic Regression...\")\nlr_model = LogisticRegression()\nlr_model.fit(X_train_tfidf, y_train)\nlr_preds = lr_model.predict(X_test_tfidf)\nlr_accuracy = accuracy_score(y_test, lr_preds)\ntraditional_metrics['Logistic Regression'] = lr_accuracy\nprint(f\"Logistic Regression Accuracy: {lr_accuracy:.4f}\")\n\n# Random Forest\nprint(\"Training Random Forest...\")\nrf_model = RandomForestClassifier()\nrf_model.fit(X_train_tfidf, y_train)\nrf_preds = rf_model.predict(X_test_tfidf)\nrf_accuracy = accuracy_score(y_test, rf_preds)\ntraditional_metrics['Random Forest'] = rf_accuracy\nprint(f\"Random Forest Accuracy: {rf_accuracy:.4f}\")\n\n# Decision Tree\nprint(\"Training Decision Tree...\")\ndt_model = DecisionTreeClassifier()\ndt_model.fit(X_train_tfidf, y_train)\ndt_preds = dt_model.predict(X_test_tfidf)\ndt_accuracy = accuracy_score(y_test, dt_preds)\ntraditional_metrics['Decision Tree'] = dt_accuracy\nprint(f\"Decision Tree Accuracy: {dt_accuracy:.4f}\")\n\n# Gradient Boosting\nprint(\"Training Gradient Boosting...\")\ngb_model = GradientBoostingClassifier()\ngb_model.fit(X_train_tfidf, y_train)\ngb_preds = gb_model.predict(X_test_tfidf)\ngb_accuracy = accuracy_score(y_test, gb_preds)\ntraditional_metrics['Gradient Boosting'] = gb_accuracy\nprint(f\"Gradient Boosting Accuracy: {gb_accuracy:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:18:03.742189Z","iopub.execute_input":"2024-09-21T18:18:03.742598Z","iopub.status.idle":"2024-09-21T18:19:14.915295Z","shell.execute_reply.started":"2024-09-21T18:18:03.742553Z","shell.execute_reply":"2024-09-21T18:19:14.914264Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Training Logistic Regression...\nLogistic Regression Accuracy: 0.9219\nTraining Random Forest...\nRandom Forest Accuracy: 0.8950\nTraining Decision Tree...\nDecision Tree Accuracy: 0.8122\nTraining Gradient Boosting...\nGradient Boosting Accuracy: 0.8800\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#  Build and Train Deep Learning Models (LSTM, CNN, RNN)","metadata":{}},{"cell_type":"code","source":"# Cell 5:\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Conv1D, GlobalMaxPooling1D, Dropout, SimpleRNN\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Dictionary to store evaluation results for deep learning models\ndeep_learning_metrics = {}\n\n# Function to build LSTM model\ndef build_lstm_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))  # Reduced embedding dimension\n    model.add(LSTM(64, return_sequences=False, dropout=0.2, recurrent_dropout=0.2))\n    model.add(Dense(1, activation='sigmoid'))  # Binary classification output\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# Function to build RNN model\ndef build_rnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))\n    model.add(SimpleRNN(64, dropout=0.2))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# Function to build CNN model\ndef build_cnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=vocab_size, output_dim=64))\n    model.add(Conv1D(64, kernel_size=5, activation='relu'))\n    model.add(GlobalMaxPooling1D())\n    model.add(Dropout(0.5))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:19:14.916776Z","iopub.execute_input":"2024-09-21T18:19:14.917146Z","iopub.status.idle":"2024-09-21T18:19:14.928360Z","shell.execute_reply.started":"2024-09-21T18:19:14.917110Z","shell.execute_reply":"2024-09-21T18:19:14.927426Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"# Train and Evaluate Deep Learning Models (LSTM, CNN, RNN)\n","metadata":{}},{"cell_type":"code","source":"# Cell 6: Train and Evaluate Deep Learning Models (LSTM, CNN, RNN)\n\n# Train and evaluate LSTM model\nprint(\"Training LSTM model...\")\nlstm_model = build_lstm_model()\nlstm_model.fit(X_train_padded, y_train, epochs=10, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\nlstm_loss, lstm_accuracy = lstm_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['LSTM'] = lstm_accuracy\nprint(f\"LSTM Model Accuracy: {lstm_accuracy:.4f}\")\n\n# Train and evaluate RNN model\nprint(\"Training RNN model...\")\nrnn_model = build_rnn_model()\nrnn_model.fit(X_train_padded, y_train, epochs=10, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\nrnn_loss, rnn_accuracy = rnn_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['RNN'] = rnn_accuracy\nprint(f\"RNN Model Accuracy: {rnn_accuracy:.4f}\")\n\n# Train and evaluate CNN model\nprint(\"Training CNN model...\")\ncnn_model = build_cnn_model()\ncnn_model.fit(X_train_padded, y_train, epochs=10, batch_size=64, validation_data=(X_test_padded, y_test), verbose=2)\ncnn_loss, cnn_accuracy = cnn_model.evaluate(X_test_padded, y_test, verbose=0)\ndeep_learning_metrics['CNN'] = cnn_accuracy\nprint(f\"CNN Model Accuracy: {cnn_accuracy:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:25:59.355442Z","iopub.execute_input":"2024-09-21T18:25:59.356382Z","iopub.status.idle":"2024-09-21T18:28:30.928748Z","shell.execute_reply.started":"2024-09-21T18:25:59.356340Z","shell.execute_reply":"2024-09-21T18:28:30.927777Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Training LSTM model...\nEpoch 1/10\n80/80 - 14s - 180ms/step - accuracy: 0.7022 - loss: 0.6000 - val_accuracy: 0.7814 - val_loss: 0.5253\nEpoch 2/10\n80/80 - 12s - 146ms/step - accuracy: 0.8473 - loss: 0.3840 - val_accuracy: 0.8027 - val_loss: 0.4043\nEpoch 3/10\n80/80 - 12s - 149ms/step - accuracy: 0.8913 - loss: 0.2578 - val_accuracy: 0.7964 - val_loss: 0.4148\nEpoch 4/10\n80/80 - 12s - 149ms/step - accuracy: 0.9305 - loss: 0.1737 - val_accuracy: 0.8051 - val_loss: 0.4341\nEpoch 5/10\n80/80 - 12s - 145ms/step - accuracy: 0.9380 - loss: 0.1315 - val_accuracy: 0.8114 - val_loss: 0.4658\nEpoch 6/10\n80/80 - 12s - 148ms/step - accuracy: 0.9436 - loss: 0.1160 - val_accuracy: 0.7837 - val_loss: 0.4905\nEpoch 7/10\n80/80 - 20s - 253ms/step - accuracy: 0.9497 - loss: 0.0980 - val_accuracy: 0.7908 - val_loss: 0.5144\nEpoch 8/10\n80/80 - 12s - 148ms/step - accuracy: 0.9467 - loss: 0.0944 - val_accuracy: 0.7995 - val_loss: 0.6586\nEpoch 9/10\n80/80 - 12s - 147ms/step - accuracy: 0.9481 - loss: 0.0941 - val_accuracy: 0.7845 - val_loss: 0.6358\nEpoch 10/10\n80/80 - 12s - 146ms/step - accuracy: 0.9530 - loss: 0.0813 - val_accuracy: 0.8074 - val_loss: 0.6299\nLSTM Model Accuracy: 0.8074\nTraining RNN model...\nEpoch 1/10\n80/80 - 6s - 74ms/step - accuracy: 0.5914 - loss: 0.6513 - val_accuracy: 0.6354 - val_loss: 0.6163\nEpoch 2/10\n80/80 - 1s - 10ms/step - accuracy: 0.8396 - loss: 0.4134 - val_accuracy: 0.6835 - val_loss: 0.5834\nEpoch 3/10\n80/80 - 1s - 15ms/step - accuracy: 0.9607 - loss: 0.1441 - val_accuracy: 0.6835 - val_loss: 0.6659\nEpoch 4/10\n80/80 - 1s - 9ms/step - accuracy: 0.9844 - loss: 0.0595 - val_accuracy: 0.6867 - val_loss: 0.6639\nEpoch 5/10\n80/80 - 1s - 9ms/step - accuracy: 0.9897 - loss: 0.0473 - val_accuracy: 0.6788 - val_loss: 0.7734\nEpoch 6/10\n80/80 - 1s - 9ms/step - accuracy: 0.9947 - loss: 0.0239 - val_accuracy: 0.6867 - val_loss: 0.7855\nEpoch 7/10\n80/80 - 1s - 9ms/step - accuracy: 0.9990 - loss: 0.0082 - val_accuracy: 0.6796 - val_loss: 0.8121\nEpoch 8/10\n80/80 - 1s - 9ms/step - accuracy: 0.9990 - loss: 0.0081 - val_accuracy: 0.7017 - val_loss: 0.8281\nEpoch 9/10\n80/80 - 1s - 9ms/step - accuracy: 1.0000 - loss: 0.0024 - val_accuracy: 0.6914 - val_loss: 0.8479\nEpoch 10/10\n80/80 - 1s - 9ms/step - accuracy: 1.0000 - loss: 0.0015 - val_accuracy: 0.6788 - val_loss: 0.9112\nRNN Model Accuracy: 0.6788\nTraining CNN model...\nEpoch 1/10\n80/80 - 5s - 65ms/step - accuracy: 0.5933 - loss: 0.6746 - val_accuracy: 0.7443 - val_loss: 0.6321\nEpoch 2/10\n80/80 - 0s - 3ms/step - accuracy: 0.7664 - loss: 0.5466 - val_accuracy: 0.7853 - val_loss: 0.4834\nEpoch 3/10\n80/80 - 0s - 3ms/step - accuracy: 0.8447 - loss: 0.3855 - val_accuracy: 0.8295 - val_loss: 0.3844\nEpoch 4/10\n80/80 - 0s - 3ms/step - accuracy: 0.9155 - loss: 0.2527 - val_accuracy: 0.8406 - val_loss: 0.3493\nEpoch 5/10\n80/80 - 0s - 3ms/step - accuracy: 0.9599 - loss: 0.1508 - val_accuracy: 0.8453 - val_loss: 0.3490\nEpoch 6/10\n80/80 - 0s - 3ms/step - accuracy: 0.9840 - loss: 0.0792 - val_accuracy: 0.8477 - val_loss: 0.3763\nEpoch 7/10\n80/80 - 0s - 3ms/step - accuracy: 0.9941 - loss: 0.0432 - val_accuracy: 0.8500 - val_loss: 0.4041\nEpoch 8/10\n80/80 - 0s - 3ms/step - accuracy: 0.9970 - loss: 0.0272 - val_accuracy: 0.8374 - val_loss: 0.4259\nEpoch 9/10\n80/80 - 0s - 3ms/step - accuracy: 0.9982 - loss: 0.0167 - val_accuracy: 0.8406 - val_loss: 0.4435\nEpoch 10/10\n80/80 - 0s - 3ms/step - accuracy: 0.9992 - loss: 0.0120 - val_accuracy: 0.8382 - val_loss: 0.4633\nCNN Model Accuracy: 0.8382\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Calculate Metrics for All Models","metadata":{}},{"cell_type":"code","source":"# Cell 7: Calculate Metrics for All Models\n\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\n# Function to compute metrics\ndef compute_metrics(y_true, y_pred):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred, pos_label=1, average='binary')\n    recall = recall_score(y_true, y_pred, pos_label=1, average='binary')\n    f1 = f1_score(y_true, y_pred, pos_label=1, average='binary')\n    return accuracy, precision, recall, f1\n\n# Dictionary to store evaluation results for traditional models\ntraditional_metrics_full = {}\n\n# Logistic Regression\nlr_preds = lr_model.predict(X_test_tfidf)\ntraditional_metrics_full['Logistic Regression'] = compute_metrics(y_test, lr_preds)\n\n# Random Forest\nrf_preds = rf_model.predict(X_test_tfidf)\ntraditional_metrics_full['Random Forest'] = compute_metrics(y_test, rf_preds)\n\n# Decision Tree\ndt_preds = dt_model.predict(X_test_tfidf)\ntraditional_metrics_full['Decision Tree'] = compute_metrics(y_test, dt_preds)\n\n# Gradient Boosting\ngb_preds = gb_model.predict(X_test_tfidf)\ntraditional_metrics_full['Gradient Boosting'] = compute_metrics(y_test, gb_preds)\n\n# Dictionary to store evaluation results for deep learning models\ndeep_learning_metrics_full = {}\n\n# LSTM Model\nlstm_preds = (lstm_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['LSTM'] = compute_metrics(y_test, lstm_preds)\n\n# RNN Model\nrnn_preds = (rnn_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['RNN'] = compute_metrics(y_test, rnn_preds)\n\n# CNN Model\ncnn_preds = (cnn_model.predict(X_test_padded) > 0.5).astype(\"int32\")\ndeep_learning_metrics_full['CNN'] = compute_metrics(y_test, cnn_preds)\n\n# Merge all metrics for comparison\nall_metrics_full = {**traditional_metrics_full, **deep_learning_metrics_full}\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:29:13.099652Z","iopub.execute_input":"2024-09-21T18:29:13.100600Z","iopub.status.idle":"2024-09-21T18:29:16.249573Z","shell.execute_reply.started":"2024-09-21T18:29:13.100561Z","shell.execute_reply":"2024-09-21T18:29:16.248611Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 41ms/step\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step\n\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#  Plot Comparisons for Accuracy, Precision, Recall, and F1-Score","metadata":{}},{"cell_type":"code","source":"# Cell 8: Plot Comparisons for Accuracy, Precision, Recall, and F1-Score\n\nimport matplotlib.pyplot as plt\n\n# Extract individual metrics\nmodel_names = list(all_metrics_full.keys())\naccuracy_scores = [metrics[0] for metrics in all_metrics_full.values()]\nprecision_scores = [metrics[1] for metrics in all_metrics_full.values()]\nrecall_scores = [metrics[2] for metrics in all_metrics_full.values()]\nf1_scores = [metrics[3] for metrics in all_metrics_full.values()]\n\n# Set up figure\nfig, axs = plt.subplots(2, 2, figsize=(14, 10))\n\n# Accuracy Plot\naxs[0, 0].bar(model_names, accuracy_scores, color='skyblue')\naxs[0, 0].set_title('Model Accuracy Comparison')\naxs[0, 0].set_ylabel('Accuracy')\naxs[0, 0].set_ylim(0, 1)\naxs[0, 0].tick_params(axis='x', rotation=45)\n\n# Precision Plot\naxs[0, 1].bar(model_names, precision_scores, color='lightgreen')\naxs[0, 1].set_title('Model Precision Comparison')\naxs[0, 1].set_ylabel('Precision')\naxs[0, 1].set_ylim(0, 1)\naxs[0, 1].tick_params(axis='x', rotation=45)\n\n# Recall Plot\naxs[1, 0].bar(model_names, recall_scores, color='lightcoral')\naxs[1, 0].set_title('Model Recall Comparison')\naxs[1, 0].set_ylabel('Recall')\naxs[1, 0].set_ylim(0, 1)\naxs[1, 0].tick_params(axis='x', rotation=45)\n\n# F1-Score Plot\naxs[1, 1].bar(model_names, f1_scores, color='lightpink')\naxs[1, 1].set_title('Model F1-Score Comparison')\naxs[1, 1].set_ylabel('F1-Score')\naxs[1, 1].set_ylim(0, 1)\naxs[1, 1].tick_params(axis='x', rotation=45)\n\n# Layout adjustment\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:29:20.230090Z","iopub.execute_input":"2024-09-21T18:29:20.230443Z","iopub.status.idle":"2024-09-21T18:29:21.148458Z","shell.execute_reply.started":"2024-09-21T18:29:20.230410Z","shell.execute_reply":"2024-09-21T18:29:21.147474Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x1000 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Create a Comparison Table","metadata":{}},{"cell_type":"code","source":"# Cell 9: Create a Comparison Table\n\nimport pandas as pd\n\n# Prepare data for the table\nmodel_names = list(all_metrics_full.keys())\naccuracy_scores = [metrics[0] for metrics in all_metrics_full.values()]\nprecision_scores = [metrics[1] for metrics in all_metrics_full.values()]\nrecall_scores = [metrics[2] for metrics in all_metrics_full.values()]\nf1_scores = [metrics[3] for metrics in all_metrics_full.values()]\n\n# Create a pandas DataFrame for the comparison table\ncomparison_df = pd.DataFrame({\n    'Model': model_names,\n    'Accuracy': accuracy_scores,\n    'Precision': precision_scores,\n    'Recall': recall_scores,\n    'F1-Score': f1_scores\n})\n\n# Display the table\nprint(comparison_df.to_string(index=False))\n\n# Show the table in the notebook (if you're using a Jupyter notebook)\ndisplay(comparison_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:20:42.067185Z","iopub.execute_input":"2024-09-21T18:20:42.067488Z","iopub.status.idle":"2024-09-21T18:20:42.086003Z","shell.execute_reply.started":"2024-09-21T18:20:42.067455Z","shell.execute_reply":"2024-09-21T18:20:42.084986Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"              Model  Accuracy  Precision   Recall  F1-Score\nLogistic Regression  0.921863   0.934959 0.906940  0.920737\n      Random Forest  0.895028   0.900800 0.888013  0.894361\n      Decision Tree  0.812155   0.811321 0.813880  0.812598\n  Gradient Boosting  0.880032   0.903010 0.851735  0.876623\n               LSTM  0.792423   0.812816 0.760252  0.785656\n                RNN  0.726914   0.720859 0.741325  0.730949\n                CNN  0.833465   0.833071 0.834385  0.833727\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 Model  Accuracy  Precision    Recall  F1-Score\n0  Logistic Regression  0.921863   0.934959  0.906940  0.920737\n1        Random Forest  0.895028   0.900800  0.888013  0.894361\n2        Decision Tree  0.812155   0.811321  0.813880  0.812598\n3    Gradient Boosting  0.880032   0.903010  0.851735  0.876623\n4                 LSTM  0.792423   0.812816  0.760252  0.785656\n5                  RNN  0.726914   0.720859  0.741325  0.730949\n6                  CNN  0.833465   0.833071  0.834385  0.833727","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Accuracy</th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1-Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Logistic Regression</td>\n      <td>0.921863</td>\n      <td>0.934959</td>\n      <td>0.906940</td>\n      <td>0.920737</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Random Forest</td>\n      <td>0.895028</td>\n      <td>0.900800</td>\n      <td>0.888013</td>\n      <td>0.894361</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Decision Tree</td>\n      <td>0.812155</td>\n      <td>0.811321</td>\n      <td>0.813880</td>\n      <td>0.812598</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Gradient Boosting</td>\n      <td>0.880032</td>\n      <td>0.903010</td>\n      <td>0.851735</td>\n      <td>0.876623</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LSTM</td>\n      <td>0.792423</td>\n      <td>0.812816</td>\n      <td>0.760252</td>\n      <td>0.785656</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RNN</td>\n      <td>0.726914</td>\n      <td>0.720859</td>\n      <td>0.741325</td>\n      <td>0.730949</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CNN</td>\n      <td>0.833465</td>\n      <td>0.833071</td>\n      <td>0.834385</td>\n      <td>0.833727</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Create Confusion Matrices for All Models","metadata":{}},{"cell_type":"code","source":"# Cell 10: Create Confusion Matrices for All Models\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Generate confusion matrices for all models\nconf_matrices = {}\n\n# Traditional Models\nconf_matrices['Logistic Regression'] = confusion_matrix(y_test, lr_preds)\nconf_matrices['Random Forest'] = confusion_matrix(y_test, rf_preds)\nconf_matrices['Decision Tree'] = confusion_matrix(y_test, dt_preds)\nconf_matrices['Gradient Boosting'] = confusion_matrix(y_test, gb_preds)\n\n# Deep Learning Models\nconf_matrices['LSTM'] = confusion_matrix(y_test, lstm_preds)\nconf_matrices['RNN'] = confusion_matrix(y_test, rnn_preds)\nconf_matrices['CNN'] = confusion_matrix(y_test, cnn_preds)\n\n# Create a figure for the grid plot\nfig, axes = plt.subplots(3, 3, figsize=(15, 15))\n\n# Flatten axes for easy iteration\naxes = axes.flatten()\n\n# Plot confusion matrices in a grid\nfor i, (model_name, conf_matrix) in enumerate(conf_matrices.items()):\n    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', ax=axes[i], cbar=False)\n    axes[i].set_title(f'{model_name} Confusion Matrix')\n    axes[i].set_xlabel('Predicted')\n    axes[i].set_ylabel('Actual')\n\n# Remove any empty subplots (if there are fewer than 9 models)\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\n# Add a grid-like structure\nfor ax in axes:\n    ax.axhline(y=0, color='black',linewidth=2)\n    ax.axhline(y=2, color='black',linewidth=2)\n    ax.axvline(x=0, color='black',linewidth=2)\n    ax.axvline(x=2, color='black',linewidth=2)\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:20:42.087300Z","iopub.execute_input":"2024-09-21T18:20:42.087655Z","iopub.status.idle":"2024-09-21T18:20:44.546294Z","shell.execute_reply.started":"2024-09-21T18:20:42.087613Z","shell.execute_reply":"2024-09-21T18:20:44.545288Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x1500 with 7 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Predict on Unseen Data (User Input)","metadata":{}},{"cell_type":"code","source":"# Cell 11: Predict on Unseen Data (User Input)\n\ndef preprocess_input_text(text, is_deep_learning=False):\n    \"\"\"\n    Preprocess user input text for prediction.\n    If is_deep_learning is True, apply tokenization and padding.\n    Otherwise, use TF-IDF vectorization for traditional models.\n    \"\"\"\n    # Preprocessing (similar to earlier)\n    text = text.lower()\n    \n    # Remove unwanted characters\n    text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)  # URLs\n    text = re.sub(r'<.*?>', '', text)  # HTML tags\n    text = re.sub(r'[^\\w\\s]', '', text)  # Punctuation\n    text = re.sub(r'\\d', '', text)  # Digits\n\n    # Handle deep learning models with tokenization and padding\n    if is_deep_learning:\n        seq = tokenizer.texts_to_sequences([text])\n        padded_seq = pad_sequences(seq, maxlen=100, padding='post')  # Use the maxlen from training\n        return padded_seq\n    \n    # Handle traditional models with TF-IDF\n    else:\n        vectorized_text = vectorizer.transform([text])  # Use the trained TF-IDF vectorizer\n        return vectorized_text\n\ndef predict_news_category(text, model_type=\"cnn\"):\n    \"\"\"\n    Predict whether the news is 'Fake' or 'Real' using the specified model.\n    Model types: 'logistic', 'random_forest', 'decision_tree', 'gradient_boosting', 'lstm', 'rnn', 'cnn'\n    \"\"\"\n    # Preprocess the input text based on the model type\n    if model_type in ['lstm', 'rnn', 'cnn']:\n        processed_text = preprocess_input_text(text, is_deep_learning=True)\n    else:\n        processed_text = preprocess_input_text(text, is_deep_learning=False)\n\n    # Dictionary for prediction based on model type\n    if model_type == \"logistic\":\n        prediction = lr_model.predict(processed_text)\n    elif model_type == \"random_forest\":\n        prediction = rf_model.predict(processed_text)\n    elif model_type == \"decision_tree\":\n        prediction = dt_model.predict(processed_text)\n    elif model_type == \"gradient_boosting\":\n        prediction = gb_model.predict(processed_text)\n    elif model_type == \"lstm\":\n        prediction = (lstm_model.predict(processed_text) > 0.5).astype(\"int32\")\n    elif model_type == \"rnn\":\n        prediction = (rnn_model.predict(processed_text) > 0.5).astype(\"int32\")\n    elif model_type == \"cnn\":\n        prediction = (cnn_model.predict(processed_text) > 0.5).astype(\"int32\")\n    else:\n        return \"Invalid model type selected.\"\n    \n    # Convert numeric prediction to class label\n    class_label = 'Real' if prediction == 1 else 'Fake'\n    return f\"The news is classified as: {class_label}\"\n\n# Example usage:\n# Input from user (test on unseen data)\nuser_input = input(\"Enter a news text for classification: \")\n\n# Select the model type (you can change the model type as needed)\nselected_model_type = \"logistic\"  # Options: 'logistic', 'random_forest', 'decision_tree', 'gradient_boosting', 'lstm', 'rnn', 'cnn'\n\n# Predict the news category\nresult = predict_news_category(user_input, model_type=selected_model_type)\nprint(result)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-21T18:20:44.547695Z","iopub.execute_input":"2024-09-21T18:20:44.548472Z","iopub.status.idle":"2024-09-21T18:22:56.712365Z","shell.execute_reply.started":"2024-09-21T18:20:44.548420Z","shell.execute_reply":"2024-09-21T18:22:56.711358Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter a news text for classification:  sjscsdfjskfkfksjfkshfsfhsjf\n"},{"name":"stdout","text":"The news is classified as: Fake\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}